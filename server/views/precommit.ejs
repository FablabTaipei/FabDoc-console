<!DOCTYPE html>
<html lang="en">

<head>
    <% include partials/head %>
        <script type="text/javascript" src="/client/js/socket.io.js"></script>
        <script type="text/javascript" src="/client/js/qrcode.min.js"></script>
        <script type="text/javascript" src="/client/js/sly.min.js"></script>
        <script type="text/javascript" src="/client/js/jquery.areaSelect.js"></script>
</head>

<body>

    <header>
        <% include partials/header %>
    </header>

    <main>
        <div class="modal" tabindex="-1" id="qrcode-modal" role="dialog" data-backdrop="false" data-keyboard="false">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <div id='qrcode-view'>
                            <div class="modal-header">
                                <h3 class="modal-title">Connect to your device</h3>
                            </div>
                            <div class="modal-body">
                                <p>
                                    Turn on the Raspberry Pi installed FabDoc-RPi-client script, and scan the QR code with camera module.
                                </p>
                                <canvas class="qrcode" id="qrcode"></canvas>
                                <% if (typeof isDev == "boolean" && isDev) { %>
                                    <!-- For Test -->
                                    <p>Token: <span id="qrcodeText"></span> </p>
                                    <% } %>
                                        <div class="alert alert-info" role="alert">
                                            <span class="glyphicon glyphicon-resize-small" aria-hidden="true"></span> If you succeed, the page will start to capture snapshot as <strong>precommit</strong>.
                                        </div>
                            </div>
                            <div class="modal-footer hide">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal" tabindex="-1" id="connected-modal" role="dialog" data-show="false">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <div id='qrcode-view'>
                            <div class="modal-header">
                                <h3 class="modal-title">Success!</h3>
                            </div>
                            <div class="modal-body">
                                <p>
                                    Now feel free to leave your computer. All the process is being recorded here. <strong>Happy making!</strong>
                                </p>
                            </div>
                            <div class="modal-footer hide">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal" tabindex="-1" id="push-modal" role="dialog" data-show="false" data-backdrop="false" data-keyboard="false">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <div id='push-view'>
                            <div class="modal-header">
                                <h3 class="modal-title">Successfully Push your commts!</h3>
                            </div>
                            <div class="modal-body">
                                <p>
                                    Now you can go back to <a href="/user/projects">personal projects list</a> or <a href="/projects">public projects list</a>
                                </p>
                            </div>
                            <div class="modal-footer hide">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="container">
            <!-- <div class="alert alert-success" id="conneted-alert" role="alert">
                <a>Connected! Receiving <strong>prcommit</strong> from your device.</a>
            </div> -->
            <div class="row" id="precommit-view">
                <div v-bind:class="{ 'loading-target' : loading }">
                    <div class="col-md-8">
                        <div class="img-view"><img id="editor" src="" path="" /></div>
                        <div class="frame">
                            <ul class="slidee">
                            </ul>
                        </div>
                        <div class="scrollbar">
                            <div class="handle"></div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="col-xs-12 btn-push" v-cloak>
                            <button class="btn btn-success pull-right" type="button" data-loading-text="Loading..." id="pushButton" @click="pushCommits">
                            Push <span class="badge"> {{ commitQueue }} </span>
                            </button>
                        </div>
                        <form>
                            <h5><strong>Commit</strong></h5>
                            <div class="form-group form-commit">
                                <label for="inputCommit" class="sr-only">Commit</label>
                                <input type="text" class="form-control" id="inputCommit" v-model="message">
                            </div>
                            <h5><strong>Components</strong></h5>
                            <div class="form-group">
                                <div class="row">
                                    <div class="col-xs-4">
                                        <label for="inputAmount" class="sr-only">Amount</label>
                                        <input type="number" class="form-control text-center" id="inputAmount" v-model="newComponentAmount" placeholder="quantity" @keyup.enter="addComponent" />
                                    </div>
                                    <div class="col-xs-1">
                                        <p class="form-control-static text-center"> x </p>
                                    </div>
                                    <div class="col-xs-7">
                                        <label for="inputComponents" class="sr-only">Components</label>
                                        <div class="input-group">
                                            <input type="text" class="form-control" id="inputComponents" v-model="newComponentName" placeholder="name" @keyup.enter="addComponent" />
                                            <span class="input-group-btn">
                                                <button type="button" @click="addComponent" class="btn btn-default"><span class="glyphicon glyphicon-plus"></span></button>
                                            </span>
                                        </div>
                                    </div>
                                    <ul class="component-list list-unstyled" v-cloak>
                                        <li v-for="component in components" class="component" :key="component.id">
                                            <div class="col-xs-4">
                                                <label class="listLabel">{{ component.amount }}</label>
                                                <input class="form-control text-center" type="number" v-model="component.amount" readonly/>
                                            </div>
                                            <div class="col-xs-1">
                                                <p class="form-control-static text-center"> x </p>
                                            </div>
                                            <div class="col-xs-7">
                                                <label class="listLabel text-center">{{ component.name }}</label>
                                                <div class="input-group">
                                                    <input class="form-control" type="text" v-model="component.name" readonly/>
                                                    <span class="input-group-btn">
                                                    <button type="button" class="remove btn btn-link" @click="removeComponent(component)"><span class="glyphicon glyphicon-minus"></span></button>
                                                    </span>
                                                </div>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            <h5><strong>Machines</strong></h5>
                            <div class="form-group has-feedback">
                                <label for="inputMachines" class="sr-only">Machines</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="inputMachines" v-model="newMachine" @keyup.enter="addMachine" />
                                    <span class="input-group-btn">
                                        <button type="button" @click="addMachine" class="btn btn-default"><span class="glyphicon glyphicon-plus"></span></button>
                                    </span>
                                </div>
                                <ul class="machine-list list-unstyled" v-cloak>
                                    <li v-for="machine in machines" class="machine" :key="machine.id">
                                        <label class="listLabel">{{ machine.name }}</label>
                                        <div class="input-group">
                                            <input class="form-control" type="text" v-model="machine.name" readonly/>
                                            <span class="input-group-btn">
                                                <button type="button" @click="removeMachine(machine)"  class="remove btn btn-link"><span class="glyphicon glyphicon-minus"></span></button>
                                            </span>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                            <h5><strong>Repository</strong></h5>
                            <div class="form-group has-feedback form-repo">
                                <label for="inputRepository" class="sr-only">Repository</label>
                                <div class="input-group">
                                    <span class="input-group-addon"><span class="glyphicon glyphicon-link"></span></span>
                                    <input type="text" class="form-control" id="inputRepository" v-model="newRepo" @keyup.enter="addRepo" />
                                    <span class="input-group-btn">
                                        <button type="button" @click="addRepo" class="btn btn-default"><span class="glyphicon glyphicon-plus"></span></button>
                                    </span>
                                </div>
                                <ul class="repo-list list-unstyled" v-cloak>
                                    <li v-for="repo in repos" class="repo" :key="repo.id">
                                        <label class="listLabel">{{ repo.name }}</label>
                                        <div class="input-group">
                                            <input class="form-control" type="text" v-model="repo.name" readonly/>
                                            <span class="input-group-btn">
                                                <button type="button" @click="removeRepo(repo)"  class="remove btn btn-link"><span class="glyphicon glyphicon-minus"></span></button>
                                            </span>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                            <h5><strong>Note</strong></h5>
                            <div class="form-group form-note">
                                <label for="inputNote" class="sr-only">Note</label>
                                <textarea class="form-control" id="inputNote" v-model="note"></textarea>
                            </div>
                        </form>
                        <button type="button" class="btn btn-primary pull-right btn-save" @click="saveCommit">Commit</button>
                        <button type="button" class="btn btn-default pull-right" @click="removeCommit">Uncommit</button>
                    </div>    
                </div>
                
                <div ref="loadwrap" v-show="loading" class="loading-mask">
                    <div class="single4"></div>
                </div>
            </div>
        </div>
    </main>
 
    <footer>
        <% include partials/footer %>
    </footer>

    <script type="text/javascript">
        // var tag_editor_options = {
        //     initAreas: [{
        //         "width ": 500,
        //         "height ": 500
        //     }],
        //     deleteMethod: 'click',
        //     area: {
        //         strokeStyle: '#E5E8E8',
        //         lineWidth: 1
        //     },
        //     point: {
        //         size: 0,
        //         fillStyle: 'black'
        //     },
        // };
        //
        // // Setup a canvas to tag materials on pre-commit pictures
        // $('#editor').areaSelect(tag_editor_options);
        //
        // $('#editor').areaSelect('bindChangeEvent', function(event, data) {
        //     console.log(data.areas);
        // });

        // $(o).prop("disabled ", true);

        socketInstance = io.connect();
        socketInstance.on('connect', function(msg) {
            console.log("Browser Connected. ");
        });
        socketInstance.on('pass_token', function(data) {
            <% if (typeof isDev == "boolean" && isDev) { %>
            // for test
            $("#qrcodeText").text(data.token);
            <% } %>
            qrcodelib.toCanvas($('#qrcode')[0], data.token, function(error) {
                if (error) console.error(error)
                console.log('QR code generated!');
            });
        });
        socketInstance.on('pass_compressed_image', function(data) {
            var image = '<li>' + '<input type="checkbox" id="pr' +
                frame.items.length + '" /><label for="pr' + frame.items.length + '" class="img-label" id="li' + frame.items.length + '"><img id="item-' +
                frame.items.length + '" src="data:' + data.type + ';base64,' +
                data.base64 + '" path="' + data.filepath + '"/></label>' + '</li>';
            frame.add(image);
            frame.activate(frame.items.length - 1);
        });
        socketInstance.on('connected_with_device', function(data) {
            console.log('Connected with device!');
            $('#qrcode-modal').modal('hide');
            $('body').css('overflow', 'scroll');
            $('#connected-modal').modal('show');

            $('#connected-alert').show();

            app.$data.loading = false;
        });

        var STORAGE_KEY = 'local-commit';
        var STORAGE_INDEXES_KEY = 'local-commit-indexes';

        var commitLocalStorage = {
            fetch: function() {
                var commits = [];
                var indexesStr = localStorage.getItem(STORAGE_INDEXES_KEY) || '';
                if (indexesStr) {
                    var indexes = indexesStr.split(',');
                    commits = indexes.map(function(index) {
                        return JSON.parse(localStorage.getItem(STORAGE_KEY + '-' + index) || '[]');
                    });
                }
                // var commits = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]')
                // commits.forEach(function(commit, index) {
                //     // var id = commit.id;
                //     // $('#pr' + id).prop('checked', true);
                //     // $('#pr' + id).prop('disabled', true);
                //     // $('#li' + id).css("background-color", "#428BCA");
                //     // commit.id = index;
                //     // commit.machine = {}
                // });
                return commits;
            },
            save: function(commits) {
                var indexesCollect = [];
                commits.forEach(function(item) {
                    indexesCollect.push(item.id);
                    localStorage.setItem(STORAGE_KEY + '-' + item.id, JSON.stringify(item));
                });
                localStorage.setItem(STORAGE_INDEXES_KEY, indexesCollect.join(','));
            },
            clear: function() {
                var indexesStr = localStorage.getItem(STORAGE_INDEXES_KEY) || '';
                if (indexesStr) {
                    localStorage.removeItem(STORAGE_INDEXES_KEY);
                    var indexes = indexesStr.split(',');
                    indexes.forEach(function(index) {
                        localStorage.removeItem(STORAGE_KEY + '-' + index);
                    });
                }
            }
        }

        var app = new Vue({
            el: '#precommit-view',

            data: {
                currentIndex: '',
                commits: commitLocalStorage.fetch(),
                message: '',
                components: [],
                machines: [],
                repos: [],
                note: '',
                newComponentAmount: '',
                newComponentName: '',
                newMachine: '',
                newRepo: '',
                loading: true
            },

            watch: {
                currentIndex: function(val, oldVal) {
                    this.retrieveCommit(val);
                },
                commits: {
                    handler: function(commits) {
                        commitLocalStorage.save(commits);
                    },
                    deep: true
                }
            },

            mounted: function(){
                // to get width/height for loading wrap after rendered.
                var main = this.$el;
                var load = this.$refs.loadwrap;
                $(load).width( main.offsetWidth ).height( main.offsetHeight );
            },

            computed: {
                commitQueue: function() {
                    return this.commits.length;
                }
            },

            methods: {
                imageSelectedToggle: function() {
                    console.log("test");
                },
                getCommit: function(id){
                    var self = this;
                    id = id || self.currentIndex;
                    if (!id) return;
                    return self.commits.filter(function(commit) {
                        return commit.id === id;
                    })[0];
                },
                saveCommit: function() {
                    var self = this;
                    if(self.currentIndex === '') return;
                    var id = self.currentIndex;
                    var currentCommit = self.getCommit(id);
                    if (currentCommit) {
                        console.log("Have already committed human!");
                        return;
                    };
                    self.addComponent();
                    self.addMachine();
                    self.addRepo();

                    var passRaw = {
                        message: self.message,
                        components: self.components,
                        machines: self.machines,
                        repos: self.repos,
                        note: self.note,
                        image: {
                            filename: $('#item-' + id).attr('path').split('/').pop(),
                            base64String: $('#item-' + id).attr('src').split(',')[1],
                            mediaType: $('#item-' + id).attr('src').split(':')[1].split(';')[0],
                        }
                    };

                    self.loading = true;
                    $.ajax({
                        url: '/project/<%= project %>/commit',
                        type: 'POST',
                        dataType: 'json',
                        contentType: 'application/json; charset=utf-8',
                        data: JSON.stringify(passRaw)
                    })
                    .done(function(response) {
                        // Do this after promise callback
                        var data = response.data;

                        // remove the string for reduce storage spaces.
                        delete passRaw.image.base64String;

                        // get first image url
                        if(data.imageUrls)
                            passRaw.imageUrl = data.imageUrls[0];

                        passRaw.id = id;
                        passRaw.remote_id = data.id;
                        
                        self.commits.push(passRaw);

                        $('#pr' + id).prop('checked', true);
                        $('#pr' + id).prop('disabled', true);
                        $('#li' + id).css("background-color", "#428BCA");
                    })
                    .fail(function(response){
                        console.log(response.error);
                        alert('Cannot connect to the server, please try again later!');
                    })
                    .always(function(){
                        self.loading = false;
                    });
                },
                retrieveCommit: function(id) {
                    var self = this;
                    var currentCommit = self.getCommit(id);
                    if (currentCommit) {
                        self.message = currentCommit.message;
                        self.components = currentCommit.components;
                        self.machines = currentCommit.machines;
                        self.repos = currentCommit.repos;
                        self.note = currentCommit.note;
                    } else {
                        self.message = '';
                        self.components = [];
                        self.machines = [];
                        self.repos = [];
                        self.note = '';
                    }
                },
                removeCommit: function() {
                    var self = this;
                    var id = self.currentIndex;
                    var currentCommit = self.getCommit(id);
                    var index = self.commits.indexOf(currentCommit);
                    if (index == -1) return;

                    self.loading = true;
                    $.ajax({
                        url: '/project/<%= project %>/commit/' + currentCommit.remote_id,
                        type: 'DELETE'
                    })
                    .done(function(){
                        // Do this after promise callback
                        self.commits.splice(index, 1);
                        self.message = '';
                        self.components = [];
                        self.machines = [];
                        self.repos = [];
                        self.note = '';
                        $('#pr' + id).prop('checked', false);
                        $('#pr' + id).prop('disabled', false);
                        $('#li' + id).css("background-color", "white");
                    })
                    .fail(function(response){
                        console.log(response.error);
                        alert('Cannot connect to the server, please try again later!');
                    })
                    .always(function(){
                        self.loading = false;
                    });                    
                },
                pushCommits: function() {
                    var self = this;

                    self.loading = true;
                    
                    $('#pushButton').prop('disabled', true);
                    $('#pushButton').button('loading');
                    var ids = self.commits.map(function(item){ return item.remote_id; });
                    
                    $.ajax({
                        url: '/project/<%= project %>/push',
                        type: 'POST',
                        dataType: 'json',
                        contentType: 'application/json; charset=utf-8',
                        data: JSON.stringify( { commits: ids } )
                    })
                    .done(function(response){
                        if (response.status == "OK") {
                            commitLocalStorage.clear();
                            $('#push-modal').modal('show');
                        } else {
                            console.log(response.error);
                            alert('Cannot connect to the server, please try again later!');
                        }
                    })
                    .fail(function(response) {
                        console.log(response);
                    })
                    .always(function(){ self.loading = false; });
                },

                addComponent: function() {
                    var amount = this.newComponentAmount && this.newComponentAmount.trim()
                    var name = this.newComponentName && this.newComponentName.trim()
                    if (!amount || !name) {
                        return
                    }
                    this.components.push({
                        id: this.components.length,
                        amount: amount,
                        name: name,
                    })
                    this.newComponentAmount = '';
                    this.newComponentName = '';
                },
                addMachine: function() {
                    var name = this.newMachine && this.newMachine.trim()
                    if (!name) {
                        return
                    }
                    this.machines.push({
                        id: this.machines.length,
                        name: name,
                    })
                    this.newMachine = '';
                },
                addRepo: function() {
                    var name = this.newRepo && this.newRepo.trim()
                    if (!name) {
                        return
                    }
                    this.repos.push({
                        id: this.repos.length,
                        name: name,
                    })
                    this.newRepo = '';
                },
                removeComponent: function(component) {
                    this.components.splice(this.components.indexOf(component), 1)
                },
                removeMachine: function(machine) {
                    this.machines.splice(this.machines.indexOf(machine), 1)
                },
                removeRepo: function(repo) {
                    this.repos.splice(this.repos.indexOf(repo), 1)
                },
            }
        });

        var frame_options = {
            horizontal: 1,
            itemNav: 'centered',
            speed: 300,
            smart: 1,
            mouseDragging: 1,
            touchDragging: 1,
            releaseSwing: 1,
            activateOn: 'click',
            activateMiddle: 1,
            scrollBar: '.scrollbar',
            dragHandle: 1,
            dynamicHandle: 1,
            minHandleSize: 70,
            scrollBy: 10,
            clickBar: 1,
            elasticBounds: 1
        };

        var frame = new Sly('.frame', frame_options);

        frame.on('active', function(e, index) {
            // Show clicked activated image into preview editor
            app.currentIndex = index;
            var activeEl = $('#item-' + index);
            $("#editor")
                .attr('src', activeEl.attr('src'))
                .attr('path', activeEl.attr('path'));
        });

        frame.init();

        $(window).resize(function(e) {
            $('.frame').sly('reload');
        });

        $("#qrcode-modal").modal('show');
    </script>
</body>

</html>
